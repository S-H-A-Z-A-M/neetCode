Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?


solution

so the basic algorithm for the process is that we can retrieve any element of the unordered_map in constant time. So first we traverse the vector and while traversing we check in the unordered_map for the (target-current element). So when the first element of the pair get pushed nothing happens but when the second element is reached we have the (target-current element) already pushed into the unordered_map so with the help of that we can retrieve both current and previous elements using map.

the unordered_map used to store (element, index) for faster retrieval and no need to revist the vector.